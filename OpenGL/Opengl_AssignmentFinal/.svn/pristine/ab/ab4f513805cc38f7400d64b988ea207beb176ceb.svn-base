#version 410 core
/*uniform sampler2D mytexture;

out vec4 color;  

in VS_OUT
{
	vec3 N;
    vec3 L;
    vec3 V;
	vec3 f_color;
	vec2 f_texcoord;
} fs_in;

void main(void) {
	vec2 flipped_texcoord = vec2(fs_in.f_texcoord.x, fs_in.f_texcoord.y);
	//color = vec4(fs_in.f_color, 1.0);
	color = texture(mytexture, flipped_texcoord);
	color = color * vec4(ambient + diffuse, 1.0);
}*/

in vec3 normal;
in vec2 st;
in vec3 L;
in vec3 V;

uniform sampler2D basic_texture;

// Material properties
uniform vec3 diffuse_albedo = vec3(0.5, 0.5, 0.5);
uniform vec3 specular_albedo = vec3(0.7);
uniform float specular_power = 128.0;
uniform vec3 ambient = vec3(0.2, 0.2, 0.2);

out vec4 frag_colour;

void main()
{
	// Normalize the incoming N, L and V vectors
    vec3 N = normalize(normal);
    vec3 L = normalize(L);
    vec3 V = normalize(V);
	// Calculate R locally
    vec3 R = reflect(-L, N);

	// Compute the diffuse and specular components for each fragment
    vec3 diffuse = max(dot(N, L), 0.0) * diffuse_albedo;
    vec3 specular = pow(max(dot(R, V), 0.0), specular_power) * specular_albedo;

	vec4 texel = texture (basic_texture, st);
	frag_colour = texel * vec4(1.0,1.0,1.0,1.0) * vec4(ambient + diffuse + specular, 1.0);
}
