#version 410 core
layout(triangles) in;
// Three lines will be generated: 6 vertices
layout(triangle_strip, max_vertices=3) out;

uniform mat4 model, view, proj;
uniform float normal_length;

in Vertex
{
  vec3 normal;
  vec2 st;
  mat4 mvp;
} vertex[];

out vec2 st;
out vec4 vertex_color;

void main(void) {
  vec3 P0 = gl_in[0].gl_Position.xyz;
  vec3 P1 = gl_in[1].gl_Position.xyz;
  vec3 P2 = gl_in[2].gl_Position.xyz;
  
  vec3 V0 = P0 - P1;
  vec3 V1 = P2 - P1;
  vec3 diff = V1 - V0;
  float diff_len = length(diff);
  
  vec3 N = normalize(cross(V1, V0));
  if (length(diff_len) > 0.001)
  {
	int i;
    for(i=0; i<gl_in.length(); i++)
    {
	  vec4 P = gl_in[i].gl_Position;
      vec3 N = normalize(cross(V1, V0));
      float len = sqrt(P.x*P.x + P.z*P.z);
      float scale = 2.0 + 1.0 * cos(0.05*2.0 + len);
     /* P = vec4(P.xyz + (N * 2.0 * scale) + \
          (N * vec3(0.05, 0.05, 0.05)), 1.0);*/
      gl_Position = P;
     // vertex_color = vertex[i].color;
      EmitVertex();
	}
	  EndPrimitive();
  }
  // Calculate normal in view-space
  //normal = mat3(transpose(inverse(model))) * vertex_normal; 
}
